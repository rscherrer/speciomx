?uniroot
x <- alist()
class(x)
?sum
?nrow
?dplyr::first
?uniroot
usethis::use_pipe()
roxygen2::roxygenize()
roxygen2::roxygenize()
usethis::use_pipe()
devtools::document()
usethis::use_testthat()
usethis::use_testthat()
usethis::use_test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
roxygen2::roxygenize()
library(speciomx)
roxygen2::roxygenize()
roxygen2::roxygenize()
usethis::use_vignette()
usethis::use_vignette("vignette")
library(speciomx)
get_default_pars()
pars <- get_default_pars()
simulate(0, 100, pars, init = rep(1000, 2))
library(speciomx)
pars <- get_default_pars()
simulate(0, 100, pars, init = rep(1000, 2))
simulate(0, 100, pars, init = rep(1000, 4))
library(speciomx)
library(magrittr)
library(ggplot2)
pars <- get_default_pars()
data <- simulate(0, 100, pars, init = rep(1000, 4))
data
data %>%
pivot_longer(c(x1, x2), names_to = "morph", values_to = "x") %>%
ggplot(aes(x = time, y = x, group = morph)) +
geom_line()
library(speciomx)
library(magrittr)
library(ggplot2)
library(tidyr)
data %>%
pivot_longer(c(x1, x2), names_to = "morph", values_to = "x") %>%
ggplot(aes(x = time, y = x, group = morph)) +
geom_line()
library(speciomx)
library(magrittr)
library(ggplot2)
library(tidyr)
theme_set(theme_classic())
data %>%
pivot_longer(c(x1, x2), names_to = "morph", values_to = "x") %>%
ggplot(aes(x = time, y = x, group = morph)) +
geom_line() +
xlab("Time (generations)") +
ylab("Trait value")
pars <- get_default_pars()
data <- simulate(0, 300, pars, init = rep(1000, 4))
data
data %>%
pivot_longer(c(x1, x2), names_to = "morph", values_to = "x") %>%
ggplot(aes(x = time, y = x, group = morph)) +
geom_line() +
xlab("Time (generations)") +
ylab("Trait value")
find_singularities(-1.1, 1.1, pars, init = rep(1000, 2))
find_singularities(-5, 5, pars, init = rep(1000, 2))
find_singularities(-1, 1, pars, init = rep(1000, 2))
find_singularities(-20, 20, pars, init = rep(1000, 2))
is_convergent(0, pars, init = rep(1000, 4))
is_convergent(0, pars, init = rep(1000, 2))
is_stable(0, pars, init = rep(1000, 2))
plot_pip(seq(-1, 1, 0.1), pars, init = rep(1000, 2))
plot_pip(seq(-0.1, 0.1, 0.01), pars, init = rep(1000, 2))
plot_pip(seq(-1, 1, 0.01), pars, init = rep(1000, 2))
plot_pip(seq(-1, 1, 0.1), pars, init = rep(1000, 2))
plot_pip(seq(-1, 1, 0.05), pars, init = rep(1000, 2))
?simulate
roxygen2::roxygenize()
library(speciomx)
library(speciomx)
data <- simulate(-0.5, 300, get_default_pars(), init = rep(1000, 4))
data
plot <- plot_pip(seq(-1, 1, 0.01), pars, init = rep(1000, 2))
pars <- get_default_pars()
## ---------------------------
##
## Script name: make_figures
##
## Purpose of script:
##
## Generate the figures in pics/
##
## How to use: just run it
##
## Author: Raphael Scherrer
##
## Date Created: 2021-06-18
##
## This script comes with no guarantee whatsoever.
##
## Copyright (c) Raphael Scherrer, 2021
##
## Find me on GitHub at https://github.com/rscherrer
##
## Email:
## r.scherrer@rug.nl
## raphael.scherrer@evobio.eu
## raph.rjfs@hotmail.fr
##
## ---------------------------
rm(list = ls())
library(speciomx)
library(tidyr)
library(magrittr)
library(ggplot2)
theme_set(theme_classic())
pars <- get_default_pars()
data <- simulate(-0.5, 300, pars, init = rep(1000, 4))
plot <- data %>%
pivot_longer(c(x1, x2), names_to = "morph", values_to = "x") %>%
ggplot(aes(x = time, y = x, group = morph)) +
geom_line() +
xlab("Time (generations)") +
ylab("Trait value")
ggsave("pics/fig_trait_evo.png", plot, width = 5, height = 3, dpi = 300)
plot <- plot_pip(seq(-1, 1, 0.01), pars, init = rep(1000, 2))
ggsave("pics/fig_pip.png", plot, width = 4, height = 3, dpi = 300)
usethis::use_github_action_check_standard()
rm(list = ls())
library(speciomx)
library(tidyverse)
pars <- get_example_pars()
library(devtools)
test()
test()
sign(0)
test()
test()
library(speciomx)
library(roxygen2)
roxygenize()
library(speciomx)
test()
test()
simulate(0, 10, pars, init, branch = 2)
pars <- get_default_pars()
init <- rep(1000, 4)
data <- simulate(0, 100, pars, init, branch = 2)
data
test()
roxygenize()
check()
devtools::test()
library(speciomx)
library(speciomx)
library(speciomx)
?simulate
?speciomx::simulate
speciomx::simulate_di
speciomx::simulate
speciomx::simulate_mono
?simulate_mono
?simulate
simulate
speciomx::simulate
simulate_di
speciomx::simulate_di
speciomx::plot_pip
speciomx::get_lambda
?speciomx::simulate
speciomx::simulate
speciomx::simulate_mono
speciomx::simulate_di
xstart <- -1
rm(list = ls())
library(speciomer)
library(tidyverse)
library(speciomx)
library(patchwork)
library(rlang)
theme_set(theme_classic())
# Set some parameters
pars <- alist(
m <- 0.01, # dispersal
d <- 0.2, # death
s <- 1.2, # ecological selection coefficient
psi <- 5, # ecological scale
w0 <- 1, # maximum attack rate
iota <- 400, # resource inflow
omicron <- 100, # resource outflow
a <- 1, # sexual selection coefficient
h <- 1 # habitat symmetry
)
xstart <- -1
library(speciomx)
roxygen2::roxygenize()
devtools::test()
roxygen2::roxygenize()
library(speciomx)
devtools::test()
pars <- get_default_pars()
pars
find_equilibrium_within(0, pars)
xres <- 0
# Of the resident population
x <- xres
# Unpack the parameters
for (i in seq(pars)) eval(pars[[i]])
get_model_within()
# Model setup
model <- get_model_within()
# Compute demographic equilibrium
denom <- 2 * d * w1 * w2
for (i in seq(model)) eval(model[[i]])
get_model_within()
for (i in 1:2) eval(model[[i]])
# Compute demographic equilibrium
denom <- 2 * d * w1 * w2
num <- ((d * omicron - (1 + h) * iota * w2) * w1 + d * omicron * w2)^2
num <- num + 4 * d * omicron * w1 * w2 * (iota * (w1 + h * w2) - d * omicron)
num <- sqrt(num)
num <- num + (1 + h) * iota * w1 * w2
num <- num - d * omicron * (w1 + w2)
N <- num / denom
N
roxygen2::roxygenize()
roxygen2::roxygenize()
pars <- get_default_pars()
is_stable_within(0, pars)
# Evaluation is at equilibrium
xres <- xeq
xeq <- 0
# Evaluation is at equilibrium
xres <- xeq
x <- xres
# Unpack the parameters
for (i in seq(pars)) eval(pars[[i]])
# Find the demographic equilibrium
N <- find_equilibrium_within(xeq, pars)
N
# Evaluate the model at equilibrium
model <- get_model_within()
for (i in seq(model)) eval(model[[i]])
# Derivatives of the attack rates
dw1 <- -2 * s * w0 / psi * (x + psi) * w1
dw2 <- -2 * s * w0 / psi * (x - psi) * w2
# Second derivatives of the attack rates
ddw1 <- -2 * s * w0 / psi * (w1 + (x + psi) * dw1)
ddw2 <- -2 * s * w0 / psi * (w2 + (x - psi) * dw2)
library(speciomx)
roxygen2::roxygenize()
devtools::test()
library(speciomx)
library(speciomx)
library(speciomx)
devtools::test()
devtools::test()
